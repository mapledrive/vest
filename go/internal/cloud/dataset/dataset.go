package dataset

import (
	"context"
	"errors"
	"sync"
	"time"
)

type Code string

const (
	Gold Code = "WGC"
)

var (
	ErrNotFound = errors.New("not found")
)

type Servicer interface {
	Get(_ context.Context, _ Code, start, end time.Time) (Chart, error)
}

type QuandlService struct {
}

func New() *QuandlService {
	return &QuandlService{}
}

type CachingService struct {
	servicer Servicer

	mu sync.Mutex
}

type Chart struct {
	Data       map[string]float64
	Start, End time.Time
}

func (s *QuandlService) Get(ctx context.Context, code Code, start, end time.Time) (Chart, error) {
	// TODO: stub
	d := map[string]float64{}

	labels := []string{"01-01", "01-02", "01-03", "01-04", "01-05", "01-06", "01-07", "01-08", "01-09", "01-10", "01-11", "01-12", "01-13", "01-14", "01-15", "01-16", "01-17", "01-18", "01-19", "01-20", "01-21", "01-22", "01-23", "01-24", "01-25", "01-26", "01-27", "01-28", "01-29", "01-30", "01-31", "02-01", "02-02", "02-03", "02-04", "02-05", "02-06", "02-07", "02-08", "02-09", "02-10", "02-11", "02-12", "02-13", "02-14", "02-15", "02-16", "02-17", "02-18", "02-19", "02-20", "02-21", "02-22", "02-23", "02-24", "02-25", "02-26", "02-27", "02-28", "03-01", "03-02", "03-03", "03-04", "03-05", "03-06", "03-07", "03-08", "03-09", "03-10", "03-11", "03-12", "03-13", "03-14", "03-15", "03-16", "03-17", "03-18", "03-19", "03-20", "03-21", "03-22", "03-23", "03-24", "03-25", "03-26", "03-27", "03-28", "03-29", "03-30", "03-31", "04-01", "04-02", "04-03", "04-04", "04-05", "04-06", "04-07", "04-08", "04-09", "04-10", "04-11", "04-12", "04-13", "04-14", "04-15", "04-16", "04-17", "04-18", "04-19", "04-20", "04-21", "04-22", "04-23", "04-24", "04-25", "04-26", "04-27", "04-28", "04-29", "04-30", "05-01", "05-02", "05-03", "05-04", "05-05", "05-06", "05-07", "05-08", "05-09", "05-10", "05-11", "05-12", "05-13", "05-14", "05-15", "05-16", "05-17", "05-18", "05-19", "05-20", "05-21", "05-22", "05-23", "05-24", "05-25", "05-26", "05-27", "05-28", "05-29", "05-30", "05-31", "06-01", "06-02", "06-03", "06-04", "06-05", "06-06", "06-07", "06-08", "06-09", "06-10", "06-11", "06-12", "06-13", "06-14", "06-15", "06-16", "06-17", "06-18", "06-19", "06-20", "06-21", "06-22", "06-23", "06-24", "06-25", "06-26", "06-27", "06-28", "06-29", "06-30", "07-01", "07-02", "07-03", "07-04", "07-05", "07-06", "07-07", "07-08", "07-09", "07-10", "07-11", "07-12", "07-13", "07-14", "07-15", "07-16", "07-17", "07-18", "07-19", "07-20", "07-21", "07-22", "07-23", "07-24", "07-25", "07-26", "07-27", "07-28", "07-29", "07-30", "07-31", "08-01", "08-02", "08-03", "08-04", "08-05", "08-06", "08-07", "08-08", "08-09", "08-10", "08-11", "08-12", "08-13", "08-14", "08-15", "08-16", "08-17", "08-18", "08-19", "08-20", "08-21", "08-22", "08-23", "08-24", "08-25", "08-26", "08-27", "08-28", "08-29", "08-30", "08-31", "09-01", "09-02", "09-03", "09-04", "09-05", "09-06", "09-07", "09-08", "09-09", "09-10", "09-11", "09-12", "09-13", "09-14", "09-15", "09-16", "09-17", "09-18", "09-19", "09-20", "09-21", "09-22", "09-23", "09-24", "09-25", "09-26", "09-27", "09-28", "09-29", "09-30", "10-01", "10-02", "10-03", "10-04", "10-05", "10-06", "10-07", "10-08", "10-09", "10-10", "10-11", "10-12", "10-13", "10-14", "10-15", "10-16", "10-17", "10-18", "10-19", "10-20", "10-21", "10-22", "10-23", "10-24", "10-25", "10-26", "10-27", "10-28", "10-29", "10-30", "10-31", "11-01", "11-02", "11-03", "11-04", "11-05", "11-06", "11-07", "11-08", "11-09", "11-10", "11-11", "11-12", "11-13", "11-14", "11-15", "11-16", "11-17", "11-18", "11-19", "11-20", "11-21", "11-22", "11-23", "11-24", "11-25", "11-26", "11-27", "11-28", "11-29", "11-30", "12-01", "12-02", "12-03", "12-04", "12-05", "12-06", "12-07", "12-08", "12-09", "12-10", "12-11", "12-12", "12-13", "12-14", "12-15", "12-16", "12-17", "12-18", "12-19", "12-20", "12-21", "12-22", "12-23", "12-24", "12-25", "12-26", "12-27", "12-28", "12-29", "12-30", "12-31", "01-01"}
	values := []float64{100, 100.29, 100.47, 100.17, 100.31, 100.71, 100.39, 100.56, 100.63, 101.06, 101.15, 100.97, 100.97, 100.61, 101, 101.62, 101.96, 101.96, 101.98, 101.87, 101.65, 101.71, 102.38, 102.39, 102.43, 102.61, 102.3, 102.16, 102.23, 102.68, 102.83, 103.06, 103.17, 103.06, 102.79, 102.84, 102.75, 102.91, 103.09, 103.16, 103.18, 104.1, 104.11, 104.11, 104.41, 104.47, 104.59, 104.64, 104.83, 104.93, 104.92, 104.93, 104.86, 105.22, 105.09, 105.22, 105.06, 104.91, 104.76, 104.41, 104.7, 104.41, 104.28, 104.5, 104.36, 104.06, 103.89, 103.81, 103.34, 103.4, 103.71, 103.77, 103.46, 103.11, 103.42, 103.76, 103.47, 104.18, 103.99, 104.25, 104.17, 104.28, 103.82, 104.05, 104.22, 103.9, 103.45, 103.45, 103.38, 103.81, 104.03, 103.77, 103.35, 103.16, 103.43, 102.88, 102.62, 104.09, 104.18, 104.41, 104.76, 104.31, 103.77, 103.24, 103.12, 102.95, 102.76, 102.87, 102.99, 103.08, 103.23, 102.9, 103.11, 103.33, 103.61, 103.65, 104.04, 104.32, 104.67, 104.42, 103.91, 104.29, 104.1, 103.69, 103.57, 104.05, 103.79, 103.71, 103.41, 103.34, 103.35, 103.53, 103.8, 103.75, 103.33, 103.15, 103.33, 103.4, 102.96, 103.22, 103.15, 103.22, 103.14, 103.07, 103.06, 103.07, 102.96, 102.99, 103.25, 103.44, 103.47, 103.84, 103.92, 103.87, 103.94, 103.9, 104.32, 103.77, 103.81, 103.8, 103.82, 103.86, 103.89, 103.78, 104, 103.7, 103.79, 103.92, 104.06, 104.36, 103.42, 102.85, 102.78, 102.49, 102.99, 103.13, 102.5, 102.33, 102.17, 102.8, 102.54, 102.35, 102.11, 102.35, 102.24, 102.12, 102.12, 101.97, 101.97, 102.33, 102.3, 102.46, 102.27, 102.69, 102.57, 102.63, 102.51, 102.37, 102.29, 102.36, 102.51, 102.66, 102.71, 102.64, 102.31, 102.75, 102.73, 102.68, 102.66, 102.78, 102.9, 102.99, 103.18, 103.22, 103.38, 103.44, 103.12, 103.31, 103.47, 103.77, 104.14, 104.53, 104.38, 104.6, 104.44, 104.45, 104.43, 104.81, 104.84, 105.12, 105.42, 105.73, 106, 106.02, 106.16, 105.54, 105.54, 105.69, 105.93, 106.21, 106.07, 105.88, 106.18, 106.34, 106.93, 107.18, 107.03, 107.02, 107.21, 107.11, 107.23, 106.81, 106.46, 106.34, 105.94, 106.02, 106.21, 105.87, 106.36, 106.15, 106.12, 106.49, 106.43, 106.21, 106.1, 105.56, 105.44, 105.43, 104.95, 105.25, 104.94, 104.87, 104.63, 104.43, 104.42, 104.19, 103.86, 104.35, 104.87, 105.01, 105.52, 105.42, 105.23, 104.92, 105.01, 105.22, 105.45, 105.32, 104.93, 104.91, 104.68, 104.38, 104.21, 103.95, 103.62, 103.03, 103.36, 103.88, 103.9, 103.93, 104.17, 104.26, 103.69, 102.89, 102.92, 103.07, 103.17, 103.89, 103.59, 103.64, 103.82, 103.84, 103.93, 103.53, 103.3, 102.57, 102.43, 103.44, 103.43, 103.19, 102.79, 102.82, 102.83, 102.69, 103.23, 103.7, 103.79, 103.84, 103.88, 103.73, 103.61, 103.61, 103.62, 103.63, 103.62, 103.64, 103.75, 103.51, 102.88, 102.91, 102.98, 102.46, 102.67, 103.2, 103.25, 102.8, 102.75, 102.45, 101.98, 102.35, 102.12, 102.14, 101.53, 101.58, 101.65, 101.48, 101.32, 101.64, 101.92, 102.19, 102.22, 102.14, 102.19, 102.24, 102.54, 102.84}

	for i, l := range labels {
		d[l] = values[i]
	}

	return Chart{Data: d, Start: start, End: end}, nil
}
